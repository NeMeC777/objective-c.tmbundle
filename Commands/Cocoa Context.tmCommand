<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>4679484F-6227-11D9-BFB1-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

line = STDIN.read

require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"

tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
if tmp &gt; 0
  class String
    def index_of_nth_occurrence_of(n, ch)
      self.unpack("U*").each_with_index do |e, i|
        return i if e == ch &amp;&amp; (n -= 1) == 0
      end
      return -1
    end
  end
  caret_placement = line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
else
  caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
end

def prettify(cand)
  stuff = cand.split("\t")
  if stuff[0].count(":") &gt; 0
    name_array = stuff[0].split(":")
    out = ""
    begin
      stuff[-(name_array.size)..-1].each_with_index do |arg,i|
        out &lt;&lt; name_array[i] +  ":("+ arg+") "
      end
    rescue NoMethodError
      out &lt;&lt; stuff[0]
    end
  else
    out = stuff[0]
  end
  return out.chomp.strip
end

def snippet_generator(cand, start)
  stuff = cand[start..-1].split("\t")
  if stuff[0].count(":") &gt; 0

    name_array = stuff[0].split(":")
    name_array = [""] if name_array.empty? 
    out = ""
    begin
      stuff[-(name_array.size)..-1].each_with_index do |arg,i|
        if (name_array.size == (i+1))
          if arg == "SEL"
            out &lt;&lt; name_array[i] + ":${0:SEL} "
          else
            out &lt;&lt; name_array[i] + ":${"+(i+1).to_s + ":"+ arg+"}$0"
          end
        else
          out &lt;&lt; name_array[i] + ":${"+(i+1).to_s + ":"+ arg+"} "
        end
      end
    rescue NoMethodError
      out &lt;&lt; stuff[0]
    end
  else
    out = stuff[0] + "$0"
  end
  return out.chomp.strip
end

def pop_up(candidates, searchTerm, caret_placement, line)
  start = searchTerm.size
  prettyCandidates = candidates.map { |candidate| [prettify(candidate), candidate] }.sort
  if prettyCandidates.size &gt; 1
    require "enumerator"
    pruneList = []  

    prettyCandidates.each_cons(2) do |a| 
      pruneList &lt;&lt; (a[0][0] != a[1][0]) # check if prettified versions are the same
    end
    pruneList &lt;&lt; true
    ind = -1
    prettyCandidates = prettyCandidates.select do |a| #remove duplicates
      pruneList[ind+=1]  
    end
  end

  if prettyCandidates.size &gt; 1
    #index = start
    #test = false
    #while !test
    #  candidates.each_cons(2) do |a,b|
    #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
    #  end
    #  break if test
    #  searchTerm &lt;&lt; candidates[0][index].chr
    #  index +=1
    #end
    
    show_dialog(prettyCandidates,start) do |c,s|
			snippet_generator(c,s)
		end
  else
    snippet_generator( candidates[0], start )
  end
end

def cfunc_snippet_generator(c,s)
	c = c.split"\t"
i = 0
  ((c[1].nil? || !c[4].nil?) ? c[0][s..-1]+"$0" : c[0][s..-1]+"("+c[1][1..-2].split(",").collect do |arg| "${"+(i+=1).to_s+":"+ arg.strip + "}" end.join(", ")+")$0")
end

def c_snip_gen(c,si,arg_type=nil)
   s = si.size
if c.size &gt; 1
		prettyCandidates = c.map do |candidate|
			ca = candidate.split("\t")
			[((ca[1].nil? || !ca[4].nil?) ? ca[0] : ca[0]+ca[1]), candidate] 
		end
		unless arg_type.nil?
			tmp = prettyCandidates.reject do |a,b|
				v = b.split("\t")[2]
				v !=nil &amp;&amp; v != arg_type
			end
			prettyCandidates = tmp unless tmp.empty?
		end
		show_dialog(prettyCandidates,s) do |cand,size|
			cfunc_snippet_generator(cand,size)
		end
	else
		cfunc_snippet_generator(c[0],s)
	end
end

	

def show_dialog(prettyCandidates,start,&amp;snip_gen)
    require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
    dialog_path = "#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog"
    pl = {'menuItems' =&gt; prettyCandidates.map { |pretty, full | { 'title' =&gt; pretty, 'cand' =&gt; full} }}
    io = open("|#{e_sh dialog_path} -u", "r+")
    io &lt;&lt;  pl.to_plist
    io.close_write
    res = PropertyList::load(io.read)
    if res.has_key? 'selectedMenuItem'
      snip_gen.call( res['selectedMenuItem']['cand'], start )
    else
      "$0"
    end
end

def candidates_or_exit(methodSearch, list, fileNames, notif = false)
	x = candidate_list(methodSearch, list, fileNames, notif)
  TextMate.exit_show_tool_tip "No completion available" if x.nil?
  return x
end

def candidate_list(methodSearch, list, fileNames, notif = false)
  candidates = []
  fileNames.each do |fileName|
    zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/#{fileName} }
    candidates += zGrepped.split("\n")
  end
  # strip notifications
  if notif
	  candidates = candidates.select {|cand| cand.match(/\tno\t/) }
	else
    candidates = candidates.reject {|cand| cand.match(/\tno\t/) }
  end
  return nil if candidates.empty?
  if list.nil?
    return candidates
  else
    n = []
    candidates.each do |cand|
      n &lt;&lt; cand if list.include?(cand.split("\t")[0])
    end
    n = (n.empty? ? candidates : n)

    return n
  end
end



def match_iter(rgxp,str)
  offset = 0
  while m = str.match(rgxp)
    yield [m[0], m.begin(0) + offset, m[0].length]
    str = m.post_match
    offset += m.end(0)
  end
end

def methodNames(line )
  up =-1
  list = ""
  pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
  match_iter(pat , line) do |tok, beg, len|
    t = tok[0].chr
    if t == "["
      up +=1
    elsif t == "]"
      up -=1
    elsif t !='"' and t !='@' and up == 0
      list &lt;&lt; tok
    end
  end
  return list
end

def return_type_based_c_constructs_suggestions(mn, search, show_arg)
	if ["addObserver:selector:name:",	"notificationWithName:", "postNotificationName:", "removeObserver:name:"].include? mn
		if show_arg
	    candidates = ["NSString *"]
	  else
		   candidates = []
		end

		candidates += candidates_or_exit(search, nil, "cocoa.txt.gz",true)
		res = c_snip_gen(candidates, search, nil)
	else
  	candidates = candidate_list(mn, nil, "cocoa.txt.gz")
    arg_type = candidates[0].split("\t")[5+mn.count(":")] unless candidates.nil?

    if show_arg &amp;&amp; !arg_type.nil?
  	  candidates = [arg_type]
    else
	    candidates = []
	  end
  	candidates += candidates_or_exit(search, nil, "CocoaFunctions.txt.gz")

	res = c_snip_gen(candidates, search, arg_type)
	end
end


def try_find_class(line)
  if  m = line.match(/^\[\s*(\[|([A-Z][a-zA-Z][a-zA-Z0-9]*)\s)/)
    require "osx/cocoa"

    if m[1] == "["
      pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
      up = -2
      last = -1
      match_iter(pat , line) do |tok, beg, len|
        t = tok[0].chr
        if t == "["
          up +=1
        elsif t == "]"
          if up == 0
            last = beg
            break
          end
          up -=1
        end
      end
      mn = methodNames(line[m.begin(1)..last])
      if mn.empty?
        m = line[m.begin(1)..last].match(/([a-zA-Z][a-zA-Z0-9]*)\s*\]$/)
        mn = m[1] unless m.nil?
      end

      zGrepped = %x{ zgrep ^#{e_sh mn + "[[:space:]]" } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz }
      candidates = zGrepped.split("\n")
      unless candidates.empty?
        if (type = candidates[0].split("\t")[5].match(/[A-Za-z]+/)) &amp;&amp; (obj = OSX::NSClassFromString(type[0]))
          b = "OSX::#{obj.to_s}".split("::").inject(Object) { |par, const| par.const_get(const) }          
          list = b.objc_instance_methods
        end      
      end
    elsif obj = OSX::NSClassFromString(m[2])
      b = "OSX::#{obj.to_s}".split("::").inject(Object) { |par, const| par.const_get(const) }
      list = b.objc_class_methods
    end
  end
  return list
end


backContext = line[1+caret_placement..-1].match /^[a-zA-Z0-9]/

pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/

if backContext
  print line[0..caret_placement]+ "$0"+ line[caret_placement+1..-1]
  TextMate.exit_discard
end

if caret_placement == -1
  print "$0"+ line[caret_placement+1..-1]
  TextMate.exit_discard
end

up = 0
start = [0]
#Count [
match_iter(pat , line[0..caret_placement]) do |tok, beg, len|
  t = tok[0].chr
  if t == "["
    start &lt;&lt; beg
  elsif t == "]"
    start.pop
  end
end

colon_and_space = /([a-zA-Z][a-zA-Z0-9]*:)\s*$/
alpha_and_space = /[a-zA-Z0-9"\)\]]\s+$/
alpha_and_caret = /[a-zA-Z][a-zA-Z0-9]*$/

mline = line.gsub(/\n/, " ")
# find Nested method
list = nil
list = try_find_class(mline[start[-1]..caret_placement])

if mline[start[-1]..caret_placement].match colon_and_space
	# [obj mess:^]
  mn = methodNames(line[start[-1]..caret_placement])
  res = return_type_based_c_constructs_suggestions(mn, "", true)

  print line[0..caret_placement] +res + line[caret_placement+1..-1]

elsif temp =mline[start[-1]..caret_placement].match( alpha_and_space)
	# [obj mess ^]
  mn = methodNames(line[start[-1]..caret_placement])
  candidates = candidates_or_exit( mn + "[[:alpha:]:]", list, "cocoa.txt.gz" ) # the alpha is to prevent satisfaction with just one part
  TextMate.exit_show_tool_tip "No completion available" if candidates.nil?
  res = pop_up(candidates, mn, caret_placement, line)
  print line[0..caret_placement] + res + line[caret_placement+1..-1]
elsif k = mline[start[-1]..caret_placement].match( alpha_and_caret)
	# [obj mess^]
  if mline[start[-1]..k.begin(0)-1+start[-1]].match alpha_and_space
    mn = methodNames(line[start[-1]..caret_placement]) + k[0]
    candidates = candidates_or_exit( mn + "[[:alpha:]:]", list, "cocoa.txt.gz")
    res =pop_up(candidates, mn, caret_placement, line)
    print line[0..caret_placement] + res + line[caret_placement+1..-1]
  # [NSOb^]
  elsif mline[start[-1]..k.begin(0)-1+start[-1]].match(/\[\s*$/)
    candidates = candidates_or_exit( k[0] + "[[:alpha:]]", nil, "CocoaClasses.txt.gz")
   res =pop_up(candidates, k[0], caret_placement, line)
    print line[0..caret_placement] + res + line[caret_placement+1..-1]
  elsif mline[start[-1]..k.begin(0)-1+start[-1]].match(colon_and_space)
	#  [obj mess: arg^]
	  mn = methodNames(line[start[-1]..caret_placement])
	  res = return_type_based_c_constructs_suggestions(mn, k[0], false)

	  print line[0..caret_placement] + res + line[caret_placement+1..-1]
  else
    print line[0..caret_placement]+ "$0"+ line[caret_placement+1..-1]
  end
else
  print line[0..caret_placement]+ "$0"+ line[caret_placement+1..-1]
end</string>
	<key>disableOutputAutoIndent</key>
	<true/>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>~</string>
	<key>name</key>
	<string>Cocoa Context</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>meta.bracketed.objc</string>
	<key>uuid</key>
	<string>478FBA1D-C11C-4D53-BE95-8B8ABB5F15DC</string>
</dict>
</plist>
